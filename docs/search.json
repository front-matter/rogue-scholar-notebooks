[
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "Rogue Scholar Notebooks",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 4 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "hello.html#polar-axis",
    "href": "hello.html#polar-axis",
    "title": "Rogue Scholar Notebooks",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 4 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "retraction_watch.html",
    "href": "retraction_watch.html",
    "title": "Posts about Retraction Watch",
    "section": "",
    "text": "This notebook uses the Rogue Scholar science blog archive to search for science blog posts, retrieve the results, and format them. We are interested in book reviews published in 2023.\n\n\n\n\n\n\nNote\n\n\n\n\nWe use the query retraction watch.\nWe limit results to posts published since 2010 (the year Retraction Watch launched) and en as language.\nWe retrieve the title, authors, publication date, abstract, blog name, and doi\nWe sort the results in reverse chronological order (newest first)\n\n\n\n\n\nCode\nimport requests\nimport pydash as py_\nfrom markdown_it import MarkdownIt\nbaseUrl = \"https://api.rogue-scholar.org/\"\nquery = \"retraction watch\"\ninclude_fields = \"title,authors,published_at,summary,blog_name,doi\"\nurl = baseUrl + f\"posts?query={query.replace(' ', '+')}&published_since=2010&language=en&sort=published_at&order=desc&per_page=50&include_fields={include_fields}\"\nresponse = requests.get(url)\nresult = response.json()\n\n# Some results removed after manual curation\ncurated = [1,3,9,12,16]\nfound = result[\"found\"]\nout_of = result[\"out_of\"]\n\ndef get_post(post):\n    return post[\"document\"]\n\ndef format_post(post):\n    md = MarkdownIt('commonmark' ,{'breaks':True,'html':True})\n    title = post[\"title\"]\n    blog = post[\"blog_name\"]\n    url = post.get(\"doi\", \"\")\n    summary = post[\"summary\"]\n    return f\"### {title}\\nPublished in {blog}\\n{url}\\n{summary}\\n\"  # md.render\n\nposts = [ get_post(x) for i, x in enumerate(result[\"hits\"]) if i not in curated ]\nposts_as_string = \"\\n\".join([ format_post(x) for x in posts])\n\n\n\n\nCode\n# Get bibtex-formatted metadata for all posts\ndef get_bibtex(post):\n    doi = doi_from_url(post[\"doi\"])\n    res = requests.get(baseUrl + \"posts/\" + doi + \"?format=bibtex\")\n    return res.text\n\nbibtex = \"\\n\".join([ get_bibtex(x) for x in posts if x.get(\"doi\", None) is not None ])\nwith open('references.bib', 'w') as f:\n    f.write(bibtex)"
  },
  {
    "objectID": "retraction_watch.html#introduction",
    "href": "retraction_watch.html#introduction",
    "title": "Posts about Retraction Watch",
    "section": "",
    "text": "This notebook uses the Rogue Scholar science blog archive to search for science blog posts, retrieve the results, and format them. We are interested in book reviews published in 2023.\n\n\n\n\n\n\nNote\n\n\n\n\nWe use the query retraction watch.\nWe limit results to posts published since 2010 (the year Retraction Watch launched) and en as language.\nWe retrieve the title, authors, publication date, abstract, blog name, and doi\nWe sort the results in reverse chronological order (newest first)\n\n\n\n\n\nCode\nimport requests\nimport pydash as py_\nfrom markdown_it import MarkdownIt\nbaseUrl = \"https://api.rogue-scholar.org/\"\nquery = \"retraction watch\"\ninclude_fields = \"title,authors,published_at,summary,blog_name,doi\"\nurl = baseUrl + f\"posts?query={query.replace(' ', '+')}&published_since=2010&language=en&sort=published_at&order=desc&per_page=50&include_fields={include_fields}\"\nresponse = requests.get(url)\nresult = response.json()\n\n# Some results removed after manual curation\ncurated = [1,3,9,12,16]\nfound = result[\"found\"]\nout_of = result[\"out_of\"]\n\ndef get_post(post):\n    return post[\"document\"]\n\ndef format_post(post):\n    md = MarkdownIt('commonmark' ,{'breaks':True,'html':True})\n    title = post[\"title\"]\n    blog = post[\"blog_name\"]\n    url = post.get(\"doi\", \"\")\n    summary = post[\"summary\"]\n    return f\"### {title}\\nPublished in {blog}\\n{url}\\n{summary}\\n\"  # md.render\n\nposts = [ get_post(x) for i, x in enumerate(result[\"hits\"]) if i not in curated ]\nposts_as_string = \"\\n\".join([ format_post(x) for x in posts])\n\n\n\n\nCode\n# Get bibtex-formatted metadata for all posts\ndef get_bibtex(post):\n    doi = doi_from_url(post[\"doi\"])\n    res = requests.get(baseUrl + \"posts/\" + doi + \"?format=bibtex\")\n    return res.text\n\nbibtex = \"\\n\".join([ get_bibtex(x) for x in posts if x.get(\"doi\", None) is not None ])\nwith open('references.bib', 'w') as f:\n    f.write(bibtex)"
  },
  {
    "objectID": "retraction_watch.html#results",
    "href": "retraction_watch.html#results",
    "title": "Posts about Retraction Watch",
    "section": "Results",
    "text": "Results\nWe found 17 blog posts mentioning retraction watch out of 9086 total posts, and ended up with 12 posts after manual curation:\n\n\n\n\nflowchart LR\n  A[9086] -- Query: retraction watch --&gt; B(17)\n  B -- Manual curation --&gt; C(12)"
  },
  {
    "objectID": "retraction_watch.html#references",
    "href": "retraction_watch.html#references",
    "title": "Posts about Retraction Watch",
    "section": "References",
    "text": "References\n\n\nCode\nprint(posts_as_string)"
  }
]