---
title: Weekly Digest
description: |
  This notebook finds Rogue Scholar blog posts published the last seven days using the Rogue Scholar API.
date: "2023-11-15"
bibliography: digest.bib
format:
  html:
    toc: true
    code-fold: true
jupyter: python3
nocite: |
  @*
---

This notebook finds Rogue Scholar blog posts published the last seven days using the [Rogue Scholar API](https://api.rogue-scholar.org/posts).

:::{.callout-note}
* We limit results to posts published since `2023-11-08` (i.e. last week) and `en` as language.
* We retrieve the `title`, `authors`, `publication date`, `abstract`, `blog name`, `blog_slug`, and `doi`.
* We sort the results in chronological order (oldest first).
* We format the results and generate markdown output.
* We generate a bibtex file of all posts and use it to generate references. 
:::

```{python}

import requests
import locale
import re
from typing import Optional
import pydash as py_
import datetime
from IPython.display import Markdown
locale.setlocale(locale.LC_ALL, "en_US")
baseUrl = "https://api.rogue-scholar.org/"
published_since = "2023-11-08"
published_until = "2023-11-14"
featured_image = 2
include_fields = "title,authors,published_at,summary,blog_name,blog_slug,doi,url,image"
url = baseUrl + f"posts?&published_since={published_since}&published_until={published_until}&language=en&sort=published_at&order=asc&per_page=50&include_fields={include_fields}"
response = requests.get(url)
result = response.json()

def get_post(post):
    return post["document"]

def format_post(post):
    url = post.get("doi", None)
    url = f"[{url}]({url})\n<br />" if url else ""
    title = f"[{post['title']}]({url})"
    published_at = datetime.datetime.utcfromtimestamp(post["published_at"]).strftime("%B %-d, %Y")
    blog = f"[{post['blog_name']}](https://rogue-scholar.org/blogs/{post['blog_slug']})"
    author = ", ".join([ f"{x['name']}" for x in post.get("authors", None) or [] ])
    summary = post["summary"]
    return f"### {title}\n{url}Published {published_at} in {blog}<br />{author}<br /><br />{summary}\n"

posts = [ get_post(x) for i, x in enumerate(result["hits"]) ]
posts_as_string = "\n".join([ format_post(x) for x in posts])

def doi_from_url(url: str) -> Optional[str]:
    """Return a DOI from a URL"""
    match = re.search(
        r"\A(?:(http|https)://(dx\.)?(doi\.org|handle\.stage\.datacite\.org|handle\.test\.datacite\.org)/)?(doi:)?(10\.\d{4,5}/.+)\Z",
        url,
    )
    if match is None:
        return None
    return match.group(5).lower()

# Get bibtex-formatted metadata for all posts
def get_bibtex(post):
    doi = doi_from_url(post["doi"])
    res = requests.get(baseUrl + "posts/" + doi + "?format=bibtex")
    return res.text

bibtex = "\n".join([ get_bibtex(x) for x in posts if x.get("doi", None) is not None ])
with open('digest.bib', 'w') as f:
    f.write(bibtex)

images = [ x["image"] for x in posts if x.get("image", None) is not None ]
image = images[featured_image]
markdown = f"![]({image})\n\n" + posts_as_string
Markdown(markdown)
```
### References

::: {#refs}
:::
